{"version":3,"file":"static/js/828.5b994dae.chunk.js","mappings":"6PAKe,SAASA,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SACnC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAASC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAChCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IACjCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAErCG,EAAe,SAACC,GAClB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MACd,OAAQd,GACJ,IAAK,OACDC,EAAQa,GACR,MACJ,IAAK,QACDX,EAASW,GACT,MACJ,IAAK,WACDT,EAAYS,GACZ,MACJ,QACI,OAEX,EACKC,EAAe,SAACH,GAClBA,EAAEI,iBACFlB,EAAS,CAAEE,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IACxBH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACf,EACD,OACI,kBAAMP,SAAUiB,EAAhB,WACI,iBAAKE,UAAWC,EAAAA,EAAAA,UAAhB,WACI,kBAAOC,QAASb,EAAhB,qBACA,kBAAOW,UAAWC,EAAAA,EAAAA,MAAcE,GAAId,EAAQe,SAAUV,EAClDX,KAAK,OACLc,MAAOd,EACPsB,KAAK,OACLC,MAAM,YACNC,YAAY,OACZC,UAAU,QAElB,4BACI,kBAAON,QAASV,EAAhB,sBACA,kBAAOQ,UAAWC,EAAAA,EAAAA,MAAcE,GAAIX,EAASY,SAAUV,EACnDY,MAAM,aACNvB,KAAK,QACLc,MAAOZ,EACPoB,KAAK,QACLE,YAAY,QACZC,UAAU,QAElB,4BACI,kBAAON,QAAST,EAAhB,yBACA,kBAAOO,UAAWC,EAAAA,EAAAA,MAAcE,GAAIV,EAAYW,SAAUV,EACtDY,MAAM,gBACNvB,KAAK,WACLc,MAAOV,EACPkB,KAAK,WACLE,YAAY,2BACZC,UAAU,QAElB,mBAAQC,QAASX,EAAcE,UAAWC,EAAAA,EAAAA,IAA1C,qBAGX,C,cCnEc,SAASS,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACI,iBAAKZ,UAAWC,EAAAA,EAAAA,UAAhB,WACI,2CACA,SAACrB,EAAD,CAAcC,SANH,SAACgC,GAChBF,GAASG,EAAAA,EAAAA,IAAOD,GACnB,MAOJ,C,qBChBD,KAAgB,UAAY,6B,qBCA5B,KAAgB,IAAM,uBAAuB,MAAQ,yB,wDCA9C,IAkBItB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAChB,EAAIiB,GAWvD,OAREjB,IAFFiB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterForm.jsx","Pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/Pages/LoginPage/LoginPage.module.css?3afe","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { nanoid } from \"nanoid\";\nimport propTypes from \"prop-types\";\nimport styles from \"../LoginForm/LoginForm.module.css\";\n\nexport default function RegisterForm({ onSubmit }) {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const nameId = useMemo(()=> nanoid(), []);\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n    \n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'email':\n                setEmail(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            default:\n                return;\n        }       \n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({ name, email, password });\n        setName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={styles.container}>\n                <label htmlFor={nameId}>Name: </label>\n                <input className={styles.input} id={nameId} onChange={handleChange}\n                    name=\"name\"\n                    value={name}\n                    type=\"text\"\n                    label=\"User name\"\n                    placeholder=\"name\"\n                    required={true} />\n            </div>\n            <div>\n                <label htmlFor={emailId}>Email: </label>\n                <input className={styles.input} id={emailId} onChange={handleChange}\n                    label=\"User email\"\n                    name=\"email\"\n                    value={email}\n                    type=\"email\"\n                    placeholder=\"email\"\n                    required={true} />\n            </div>\n            <div>\n                <label htmlFor={passwordId}>Password: </label>\n                <input className={styles.input} id={passwordId} onChange={handleChange}\n                    label=\"User password\"\n                    name=\"password\"\n                    value={password}\n                    type=\"password\"\n                    placeholder=\"password (min 6 symbols)\"\n                    required={true} />\n            </div>\n            <button onClick={handleSubmit} className={styles.btn} >Login</button>\n        </form>\n    )\n}\n\nRegisterForm.propTypes = {\n    onSubmit: propTypes.func.isRequired\n}","import { useDispatch } from \"react-redux\";\nimport { signup } from \"redux/Auth/auth-operations\";\nimport RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport styles from \"../LoginPage/LoginPage.module.css\";\n\nexport default function RegisterPage () {\n    const dispatch = useDispatch();\n\n    const onRegister = (data) => {\n        dispatch(signup(data));\n    }\n    return (\n        <div className={styles.container}>\n            <h1>Register page</h1>\n            <RegisterForm onSubmit={onRegister} />\n        </div>\n    )\n} \n\n ","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginPage_container__5NdUP\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"LoginForm_btn__B2KLK\",\"input\":\"LoginForm_input__aQRtt\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","onSubmit","useState","name","setName","email","setEmail","password","setPassword","nameId","useMemo","nanoid","emailId","passwordId","handleChange","e","target","value","handleSubmit","preventDefault","className","styles","htmlFor","id","onChange","type","label","placeholder","required","onClick","RegisterPage","dispatch","useDispatch","data","signup","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}